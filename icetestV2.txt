local Remote = script.Parent
local CDTime = 10
local CD = false
local quirkPower = game.ReplicatedStorage.quirkPower
local player = script.Parent.Parent.Parent.Parent
local plName = player.Name
print(plName)
-- Region for block selection
local function regionCheck()
	local qpv = quirkPower.Value
	local playerpos = game.Workspace.Characters:WaitForChild(plName).HumanoidRootPart.Position
	local playerXYZ = Vector3.new(playerpos.X - qpv, playerpos.Y - qpv, playerpos.Z - qpv)
	local XYZ_plus_QP = Vector3.new(playerpos.X + qpv, playerpos.Y + qpv, playerpos.Z + qpv) -- Larger region scales with QP
	print(quirkPower.Value.. "is region power")
	local region = Region3.new(playerXYZ, XYZ_plus_QP)
	print(region.CFrame)
	print(region.Size)
	local part = Instance.new("Part")
	part.Anchored = true
	part.Size = region.Size
	part.Parent = game.Workspace
	part.CanCollide = false
	part.Transparency = .3
	part.Name = "Regional Part"
	local partsInRegion = workspace:FindPartsInRegion3(region, part, 10000)
	part:Destroy()
	return partsInRegion
end

local function hasProperty(object, prop)
	local t = object[prop] 
end

game.ReplicatedStorage.quirkPower:GetPropertyChangedSignal("Value"):Connect(function()
	quirkPower = game.ReplicatedStorage.quirkPower
	print("Quirk power is now.. ".. quirkPower.Value)
end)

function meshCheck(v)
	local orv = v
	local success = pcall(function() hasProperty(v, "TextureID") end) 
	print(v)
	if success then
		print("did this3")
		orv.TextureID = ""
	end
	local success2 = pcall(function() hasProperty(v, "MeshID") end)
	if success2 then
		print("did this4")
		orv.MeshID = ""
	end

	v:ClearAllChildren()
end

function iceMaker (v)

	for i,v in pairs(v) do
		if v:IsA("Part") or v:IsA("MeshPart") or v:IsA("WedgePart") then
			if v.Parent:FindFirstChild("Humanoid") or v:IsDescendantOf(game.Workspace.Characters) or v.Parent:IsDescendantOf(game.Players) then
				print("Avoided killing a human!")
			end
			print("Quirk power is..".. quirkPower.Value)
			v.Transparency = .55
			v.Reflectance = 1
			v.Color = Color3.fromRGB(128, 226, 255)
			v.BrickColor = BrickColor.new("Tr. Flu. Blue")
			v.Material = "Ice"
			local physProperties = PhysicalProperties.new(1, 0, 0, 100, 0)
			v.CustomPhysicalProperties = physProperties
			meshCheck(v)
			--v.Anchored = false
			print("looking in the main direc")
			--wait(1/quirkPower.Value)
			print(1/quirkPower.Value)
		elseif v ~= "Part" then
			iceMaker(v:GetChildren()) -- um recursion?? im kinda cracked, thank you :))))
			print("looking for parts")
		end
	end
end

Remote.OnServerEvent:Connect(function(Player, Action)
	local Char = Player.Character
	local Hum = Char:WaitForChild("Humanoid")

	local Anim = script:WaitForChild("Anims")
	local Sounds = script:WaitForChild("Sounds")
	local FX = script:WaitForChild("FX")

	local handOut = Hum:LoadAnimation(Anim:WaitForChild("armOut"))

	if CD == false then
		CD = true
		print("Successfully Fired IceMove1")

		handOut:Play()
		wait(1) -- 1S IS ANIMATION TIME
		handOut:Stop()
		iceMaker(regionCheck())
		print("All parts have been FROZEN")	
		wait(CDTime) -- ICE COOLDOWN TIME

		CD = false
	end
end)
